names=quo
visibility=public
kind=defined

--- quo(other)    -> Rational | Float | Complex

self を other で割った商を返します。
整商を得たい場合は [[m:Numeric#div]] を使ってください。

[[m:Numeric#fdiv]] が結果を [[c:Float]] で返すメソッドなのに対して quo はなるべく正確な数値を返すことを意図しています。
具体的には有理数の範囲に収まる計算では [[c:Rational]] の値を返します。
[[c:Float]] や [[c:Complex]] が関わるときはそれらのクラスになります。

Numeric のサブクラスは、このメソッドを適切に再定義しなければなりません。

なお、割る数が 0 以外の整数の場合の挙動はバグのため Ruby2.1.0 以降では修正されています。詳しくは[[url:https://bugs.ruby-lang.org/issues/5515]]を参照して下さい。

@param other 自身を割る数を指定します。

  1.quo(3)      #=> (1/3)
  1.0.quo(3)    #=> 0.3333333333333333
  1.quo(3.0)    #=> (1/3)
                # 割る数が 0 以外の整数なら Float でも結果は Rational になる。
  1.quo(0.5)    #=> 2.0
  
  Complex(1, 1).quo(1)  #=> ((1/1)+(1/1)*i)
  1.quo(Complex(1, 1))  #=> ((1/2)-(1/2)*i)

@see [[m:Numeric#fdiv]]

