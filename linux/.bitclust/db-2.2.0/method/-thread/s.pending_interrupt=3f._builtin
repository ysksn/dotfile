names=pending_interrupt?
visibility=public
kind=defined

--- pending_interrupt?(error = nil) -> boolean

非同期割り込みのキューが空かどうかを返します。

[[m:Thread.handle_interrupt]] は非同期割り込みの発生を延期させるのに使
用しますが、本メソッドは任意の非同期割り込みが存在するかどうかを確認す
るのに使用します。

本メソッドが true を返した場合、[[m:Thread.handle_interrupt]] で例外の
発生を延期するブロックを終了すると延期させられていた例外を発生させるこ
とができます。

@param error 対象の例外クラスを指定します。省略した場合は全ての例外を対
             象に確認を行います。

例: 延期させられていた例外をただちに発生させる。

  def Thread.kick_interrupt_immediately
    Thread.handle_interrupt(Object => :immediate) {
      Thread.pass
    }
  end

==== 使い方

  th = Thread.new{
    Thread.handle_interrupt(RuntimeError => :on_blocking){
      while true
        ...
        # ここまでで割り込みが発生しても安全な状態になった。
        if Thread.pending_interrupt?
          Thread.handle_interrupt(Object => :immediate){}
        end
        ...
      end
    }
  }
  ...
  th.raise # スレッド停止。

この例は以下のように記述する事もできます。

  flag = true
  th = Thread.new{
    Thread.handle_interrupt(RuntimeError => :on_blocking){
      while true
        ...
        # ここまでで割り込みが発生しても安全な状態になった。
        break if flag == false
        ...
      end
    }
  }
  ...
  flag = false # スレッド停止

@see [[m:Thread#pending_interrupt?]], [[m:Thread.handle_interrupt]]

