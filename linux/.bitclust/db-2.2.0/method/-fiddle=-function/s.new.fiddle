names=new
visibility=public
kind=defined

--- new(ptr, args, ret_type, abi=Fiddle::Function::DEFAULT, name: nil) -> Fiddle::Function
ptr (関数ポインタ)から Fiddle::Function オブジェクトを
生成します。

ptr には [[c:Fiddle::Handle]] から [[m:Fiddle::Handle#sym]] などで取りだした
関数ポインタ(を表す整数)、もしくは関数を指している
[[c:Fiddle::Pointer]] を渡します。

args、ret_type で関数の引数と返り値の型を指定します。これには以下の
定数が利用できます。「-TYPE_INT」 のように符号を反転させると unsigned を
意味します。
  * [[m:Fiddle::TYPE_VOID]]
  * [[m:Fiddle::TYPE_VOIDP]]
  * [[m:Fiddle::TYPE_CHAR]]
  * [[m:Fiddle::TYPE_SHORT]]
  * [[m:Fiddle::TYPE_INT]]
  * [[m:Fiddle::TYPE_LONG]]
  * [[m:Fiddle::TYPE_LONG_LONG]]
  * [[m:Fiddle::TYPE_FLOAT]]
  * [[m:Fiddle::TYPE_DOUBLE]]
  * [[m:Fiddle::TYPE_INTPTR_T]]
  * [[m:Fiddle::TYPE_UINTPTR_T]]
  * [[m:Fiddle::TYPE_PTRDIFF_T]]
  * [[m:Fiddle::TYPE_SIZE_T]]
  * [[m:Fiddle::TYPE_SSIZE_T]]


abi で呼出規約を指定します。
  * [[m:Fiddle::Function::DEFAULT]]
  * [[m:Fiddle::Function::STDCALL]]
のどちらかを指定します。

  require 'fiddle'
  
  h = Fiddle::Handle.new('libc.so.6')
  func = Fiddle::Function.new(h.sym("strlen"), [Fiddle::TYPE_VOIDP], 
                              Fiddle::TYPE_INT, name: "strlen")
  p func.ptr == h.sym("strlen") # => true
  p func.call("abc") # => 3
  p func.name # => "strlen"

@param ptr C の関数を指す [[c:Fiddle::Pointer]] オブジェクトもしくは
       アドレスを表す整数
@param args 引数の型を表す配列
@param ret_type 返り値の型
@param abi 呼出規約
@param name 関数の名前(文字列)

